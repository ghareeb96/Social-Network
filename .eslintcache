[{"J:\\Projects\\React Projects\\social-network\\src\\index.js":"1","J:\\Projects\\React Projects\\social-network\\src\\App.js":"2","J:\\Projects\\React Projects\\social-network\\src\\reportWebVitals.js":"3","J:\\Projects\\React Projects\\social-network\\src\\components\\reg-log\\reg-log.jsx":"4","J:\\Projects\\React Projects\\social-network\\src\\firebase.js":"5","J:\\Projects\\React Projects\\social-network\\src\\components\\Home\\Home.jsx":"6","J:\\Projects\\React Projects\\social-network\\src\\components\\post\\Posts.jsx":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":6025,"mtime":1612232561243,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":4977,"mtime":1612241240952,"results":"12","hashOfConfig":"9"},{"size":561,"mtime":1610613467249,"results":"13","hashOfConfig":"9"},{"size":4214,"mtime":1612232564682,"results":"14","hashOfConfig":"9"},{"size":2012,"mtime":1611584733786,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"tg3bt",{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"J:\\Projects\\React Projects\\social-network\\src\\index.js",[],["33","34"],"J:\\Projects\\React Projects\\social-network\\src\\App.js",["35","36","37","38","39"],"import React, { useEffect, useState } from 'react'\nimport './App.scss';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport firebaseDB from \"./firebase\";\nimport RegLog from \"./components/reg-log/reg-log\";\nimport Home from \"./components/Home/Home\";\n\nfunction App() {\n  const database = firebaseDB.database().ref();\n  const storage = firebaseDB.storage();\n\n  const [image, setImage] = useState(null);\n  const [currentUser, setCurrentUser] = useState({});\n  const [initUser, setInitUser] = useState({})\n  const [loggedUser, setloggedUser] = useState('');\n  const [users, setUsers] = useState([]);\n  const [userKey, setUserKey] = useState(\"\");\n  const [isFirstLogin, setFirstLogin] = useState(false)\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [emailError, setEmailError] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n  const [postText, setPostText] = useState(\"\");\n\n\n  const addPost = () => {\n    if (postText.trim() !== \"\") {\n      const date = new Date();\n\n      database.child(`users/${userKey}/posts`).push(\n        {\n          body: postText,\n          date: date.toLocaleString(\"en-US\", {\n            hour: \"numeric\",\n            minute: \"numeric\",\n            weekday: \"short\",\n            month: \"short\",\n            year: \"numeric\"\n          })\n        }\n      )\n      setPostText(\"\")\n\n    }\n  }\n  const authListener = () => {\n    firebaseDB.auth().onAuthStateChanged((user) => {\n      if (user) {\n        clearInput();\n        setloggedUser(user);\n      } else {\n        setloggedUser(\"\");\n      }\n    })\n  }\n  const handleLogout = () => {\n    firebaseDB.auth().signOut();\n    setloggedUser(\"\")\n  }\n  const upload = () => {\n    const uploadTask = storage.ref(`images/${loggedUser.email}`).put(image)\n    uploadTask.on(\"state_changed\",\n      snapshot => { },\n      error => console.log(error),\n      () => {\n        storage\n          .ref(\"images\")\n          .child(loggedUser.email)\n          .getDownloadURL()\n          .then(url => {\n            database.child(`users/${userKey}/profilePic`).set(url)\n          })\n      }\n\n    )\n  }\n  const clearInput = () => {\n    setName(\"\")\n    setEmail(\"\");\n    setPassword(\"\");\n  }\n  const clearErrors = () => {\n    setEmailError(\"\");\n    setPasswordError(\"\");\n  }\n  const handleSignUp = () => {\n    clearErrors();\n    setFirstLogin(true)\n    setInitUser({\n      name: name,\n      email: email,\n      profilePic: \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\n      posts: {}\n    })\n\n    firebaseDB.auth().createUserWithEmailAndPassword(email, password)\n      .catch(err => {\n        switch (err.code) {\n          case \"auth/invalid-email\":\n          case \"auth/email-already-in-use\":\n            setEmailError(err.message);\n            break;\n          case \"auth/weak-password\":\n            setPasswordError(err.message);\n            break;\n        }\n      })\n\n  }\n  const handleLogin = () => {\n    clearErrors();\n    setFirstLogin(false)\n    firebaseDB.auth().signInWithEmailAndPassword(email, password)\n      .catch(err => {\n        switch (err.code) {\n          case \"auth/invalid-email\":\n          case \"auth/user-disabled\":\n          case \"auth/user-not-found\":\n            setEmailError(err.message);\n            break;\n          case \"auth/wrong-password\":\n            setPasswordError(err.message);\n            break;\n        }\n      })\n\n  }\n  useEffect(() => {\n    database.child(\"users\").on(\"value\", (snapshot) => {\n      if (snapshot.val() !== null) {\n        setUsers(snapshot.val())\n      }\n    })\n    authListener();\n  }, [])\n\n  // useEffect(() => {\n  //   if (userKey) {\n  //     database.child(`users/${userKey}/posts`).on(\"value\", (snapshot) => {\n  //       let postsArr = snapshot.val();\n  //       if (postsArr !== null) {\n  //         // console.log(postsArr)\n  //         setCurrentUser({\n  //           name: currentUser.name,\n  //           email: currentUser.email,\n  //           profilePic: currentUser.profilePic,\n  //           posts: postsArr\n  //         })\n  //       } else {\n  //         setCurrentUser({\n  //           name: currentUser.name,\n  //           email: currentUser.email,\n  //           profilePic: currentUser.profilePic,\n  //           posts: {}\n  //         })\n  //       }\n  //     })\n  //   }\n  // }, [userKey])\n\n  useEffect(() => {\n    if (userKey) {\n      database.child(`users/${userKey}`).on(\"value\", (snapshot) => {\n\n        setCurrentUser(snapshot.val())\n        console.log(snapshot.val())\n      })\n    }\n  }, [userKey])\n\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/Home\">\n            <Home\n              initUser={initUser}\n              setFirstLogin={setFirstLogin}\n              database={database}\n              isFirstLogin={isFirstLogin}\n              handleLogout={handleLogout}\n              users={users}\n              loggedUser={loggedUser}\n              setUserKey={setUserKey}\n              userKey={userKey}\n              currentUser={currentUser}\n              setCurrentUser={setCurrentUser}\n              addPost={addPost}\n              postText={postText}\n              setPostText={setPostText}\n              setImage={setImage}\n              upload={upload}\n            />\n          </Route>\n          <Route exact path=\"/\">\n            <RegLog\n              name={name}\n              setName={setName}\n              email={email}\n              setEmail={setEmail}\n              loggedUser={loggedUser}\n              password={password}\n              setPassword={setPassword}\n              handleLogin={handleLogin}\n              handleSignUp={handleSignUp}\n              emailError={emailError}\n              passwordError={passwordError}\n              clearErrors={clearErrors}\n              clearInput={clearInput}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","J:\\Projects\\React Projects\\social-network\\src\\reportWebVitals.js",[],"J:\\Projects\\React Projects\\social-network\\src\\components\\reg-log\\reg-log.jsx",["40"],"J:\\Projects\\React Projects\\social-network\\src\\firebase.js",[],"J:\\Projects\\React Projects\\social-network\\src\\components\\Home\\Home.jsx",["41","42"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport Posts from '../post/Posts'\r\nimport \"./Home.scss\"\r\n\r\nconst Home = (props) => {\r\n    const [gotUser, setGotUser] = useState(false);\r\n\r\n    const editPost = (e) => {\r\n        console.log(e)\r\n    }\r\n\r\n    const deletePost = (e) => {\r\n        if (window.confirm(\"Are you sure you want to delete this post ?\")) {\r\n            props.database.child(`users/${props.userKey}/posts/${e}`)\r\n                .remove(\r\n                    err => {\r\n                        if (err) {\r\n                            console.log(err)\r\n                        }\r\n                    }\r\n                )\r\n        }\r\n    }\r\n\r\n    const saveUser = () => {\r\n        props.database.child(\"users\").push(props.initUser);\r\n    }\r\n\r\n    const handleUpload = (e) => {\r\n        if (e.target.files[0]) {\r\n            props.setImage(e.target.files[0])\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.isFirstLogin) {\r\n            saveUser();\r\n            props.setFirstLogin(false);\r\n        }\r\n\r\n        if (!gotUser && !props.isFirstLogin) {\r\n            const curUser = () => {\r\n                if (props.users) {\r\n                    for (const [key, value] of Object.entries(props.users)) {\r\n                        if (value.email === props.loggedUser.email) {\r\n                            props.setCurrentUser(value)\r\n                            props.setUserKey(key)\r\n                            setGotUser(true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            curUser();\r\n        }\r\n\r\n\r\n    }, [props])\r\n\r\n\r\n    if (props.loggedUser) {\r\n        return (\r\n            <div className=\"home\">\r\n                {props.currentUser ?\r\n                    (<>\r\n                        <div className=\"header\">\r\n                            <h1>Welcome Back {props.currentUser.name}</h1>\r\n                            <button onClick={props.handleLogout}>Logout</button>\r\n                        </div>\r\n                        <div className=\"image\">\r\n                            <input type=\"file\" name=\"image\" id=\"image\" onChange={handleUpload} />\r\n                            <button onClick={props.upload}>Upload</button>\r\n                            <img src={props.currentUser.profilePic} alt=\"PP\" />\r\n                        </div>\r\n                        <div className=\"posts-container\">\r\n                            <div className=\"add-post\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name=\"newPost\"\r\n                                    value={props.postText}\r\n                                    onChange={(e) => props.setPostText(e.target.value)} />\r\n\r\n                                <button\r\n                                    className=\"add\"\r\n                                    onClick={() => { props.addPost() }}\r\n                                >\r\n                                    Post</button>\r\n                            </div>\r\n\r\n\r\n                            <Posts\r\n                                posts={props.currentUser.posts}\r\n                                deletePost={deletePost}\r\n                                editPost={editPost}\r\n                            />\r\n\r\n\r\n                        </div>\r\n                        <div className=\"users\">\r\n                            {props.users ?\r\n                                Object.entries(props.users)\r\n                                    .filter((item) => item[1].email !== props.currentUser.email)\r\n                                    .map((item) =>\r\n                                        <a href=\"#\" className=\"link\" key={item[0]}>{item[1].name}</a>\r\n                                    )\r\n                                :\r\n                                \"\"\r\n                            }\r\n                        </div>\r\n                    </>\r\n                    )\r\n                    :\r\n                    \"\"\r\n                }\r\n            </div >\r\n\r\n        )\r\n    } else {\r\n        return (\r\n            <Redirect to=\"/\"></Redirect>\r\n        )\r\n    }\r\n}\r\nexport default Home;\r\n\r\n","J:\\Projects\\React Projects\\social-network\\src\\components\\post\\Posts.jsx",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":7,"column":3,"nodeType":"49","messageId":"50","endLine":7,"endColumn":11},{"ruleId":"51","severity":1,"message":"52","line":104,"column":9,"nodeType":"53","messageId":"54","endLine":112,"endColumn":10},{"ruleId":"51","severity":1,"message":"52","line":121,"column":9,"nodeType":"53","messageId":"54","endLine":130,"endColumn":10},{"ruleId":"55","severity":1,"message":"56","line":141,"column":6,"nodeType":"57","endLine":141,"endColumn":8,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":175,"column":6,"nodeType":"57","endLine":175,"endColumn":15,"suggestions":"60"},{"ruleId":"47","severity":1,"message":"61","line":1,"column":27,"nodeType":"49","messageId":"50","endLine":1,"endColumn":36},{"ruleId":"55","severity":1,"message":"62","line":61,"column":8,"nodeType":"57","endLine":61,"endColumn":15,"suggestions":"63"},{"ruleId":"64","severity":1,"message":"65","line":107,"column":41,"nodeType":"66","endLine":107,"endColumn":84},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'authListener' and 'database'. Either include them or remove the dependency array.","ArrayExpression",["69"],"React Hook useEffect has a missing dependency: 'database'. Either include it or remove the dependency array.",["70"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'gotUser' and 'saveUser'. Either include them or remove the dependency array.",["71"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},{"desc":"76","fix":"77"},"Update the dependencies array to be: [authListener, database]",{"range":"78","text":"79"},"Update the dependencies array to be: [database, userKey]",{"range":"80","text":"81"},"Update the dependencies array to be: [gotUser, props, saveUser]",{"range":"82","text":"83"},[3700,3702],"[authListener, database]",[4632,4641],"[database, userKey]",[1648,1655],"[gotUser, props, saveUser]"]